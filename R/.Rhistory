selected_rows
}
get_hyp_mat(3,1)
get_hyp_mat(3,2)
library(multcomp)
?mmm
### attitude towards science data
data("mn6.9", package = "TH.data")
### one model for each item
mn6.9.y1 <- glm(y1 ~ group, family = binomial(),
na.action = na.omit, data = mn6.9)
mn6.9.y2 <- glm(y2 ~ group, family = binomial(),
na.action = na.omit, data = mn6.9)
mn6.9.y3 <- glm(y3 ~ group, family = binomial(),
na.action = na.omit, data = mn6.9)
mn6.9.y4 <- glm(y4 ~ group, family = binomial(),
na.action = na.omit, data = mn6.9)
mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4)
### test all parameters simulaneously
summary(glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2))))
### test all parameters simulaneously
summary(glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2))))
### group differences
summary(glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf("group2 = 0")))
vcov(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4))
### test all parameters simulaneously
vcov(glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2))))
glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2)))
coef(glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2))))
vcov(glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2))))
### test all parameters simulaneously
m <- glht(mmm(mn6.9.y1, mn6.9.y2, mn6.9.y3, mn6.9.y4),
mlf(diag(2)))
summary(m)
cov2cor(vcov(m))
install.packages("parallel")
library(parallel)
detectCores()
availableCores()
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07-simulations")
source("aux-functions.R")
library(future)
library(purrr)
library(furrr)
# library(parallel)
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# mu=c(0,1,2,5);
mu=c(0,0,0,0);
mu_6m=mu; mu_12m=mu
# Function to simulate trial data (2-stages, with dose selection)
sim_trial <- function(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu_6m, mu_12m=mu_12m, sd_y=0.1, alpha1=0.5, alpha=0.05){
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu_6m, mu_12m=mu_12m, sd_y=sd_y)
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
pval_dunnet = res_stage1$Placebo[,4]
# (pval_dunnet)
# sum(pval_dunnet>alpha1)
# Selection
# Arms indicators: 1: Low; 2: Medium, 3:High
#--- Worst case: No trend is seen in any of the doses (e.g., all p> alpha1): select highest dose
if(sum(pval_dunnet>alpha1)==3){
sel=3
}
#--- Intermediate case: some doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)<3 & sum(pval_dunnet<alpha1)>=1){
sel=which(pval_dunnet<alpha1)[1]
}
#--- Intermediate case 2: some doses show a trend: select the (highest) effective dose, no new recruitment for the other doses
# if(sum(pval_dunnet<alpha1)<3){
#   sel=which.min(pval_dunnet)+1
# }
#--- Best case: All doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)==3){
sel=1
}
sel <- sel+1
hyp <- get_hyp_mat(3,sel-1)
hyp <- hyp + (hyp != 0)
# (hyp)
sset_hyp1 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])])
sset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
sset_hyp3 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[3,][hyp[3,] != 0])])
sset_hyp4 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[4,][hyp[4,] != 0])])
# pvalues closed test
pvalue_anova1 <- summary(aov(y_12m ~ treat, data = sset_hyp1))[[1]][[5]][[1]]
pvalue_anova2 <- summary(aov(y_12m ~ treat, data = sset_hyp2))[[1]][[5]][[1]]
pvalue_anova3 <- summary(aov(y_12m ~ treat, data = sset_hyp3))[[1]][[5]][[1]]
pvalue_anova4 <- summary(aov(y_12m ~ treat, data = sset_hyp4))[[1]][[5]][[1]]
# c(pvalue_anova1,pvalue_anova2,pvalue_anova3,pvalue_anova4)
pvalue_stage1 <- max(pvalue_anova1,pvalue_anova2,pvalue_anova3,pvalue_anova4)
# stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sd_y=sd_y)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
pvalue_stage2 <- summary(aov(y_12m ~ treat, data = db_stage2))[[1]][[5]][[1]]
# Inverse normal combination test
combined_pvalue = 1 - pnorm(qnorm(1 - pvalue_stage1) / sqrt(2) + qnorm(1 - pvalue_stage2) / sqrt(2))
# list_res=list(db_stage1,db_stage2,sel,combined_pvalue,pvalue_stage1,pvalue_stage2)
return(list(result1=(combined_pvalue<alpha), result2=sel))
}
##########################################################
##########################################################
# Run simulations
# Set a specific seed for reproducibility
set.seed(421)
# Set the number of trials to run and other parameters
n_trials <- 100000
# n_cores <- detectCores()-1  # Adjust the number of cores based on your machine's capabilities
n_cores <- availableCores()-1
# Set up the "multicore" future plan
# plan(multicore, workers = n_cores)
plan(multisession, workers = n_cores)
set <- list(
scenario1 = c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05),
scenario2 = c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05)
)
results <- future_map(set, ~ replicate(10, sim_trial(.x)))
sim_trial(c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05))
results <- future_map(set, ~ map(10, sim_trial(.x)))
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07-simulations")
source("aux-functions.R")
library(future)
library(purrr)
library(furrr)
# library(parallel)
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# mu=c(0,1,2,5);
mu=c(0,0,0,0);
mu_6m=mu; mu_12m=mu
# Function to simulate trial data (2-stages, with dose selection)
sim_trial <- function(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu_6m, mu_12m=mu_12m, sd_y=0.1, alpha1=0.5, alpha=0.05){
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu_6m, mu_12m=mu_12m, sd_y=sd_y)
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
pval_dunnet = res_stage1$Placebo[,4]
# (pval_dunnet)
# sum(pval_dunnet>alpha1)
# Selection
# Arms indicators: 1: Low; 2: Medium, 3:High
#--- Worst case: No trend is seen in any of the doses (e.g., all p> alpha1): select highest dose
if(sum(pval_dunnet>alpha1)==3){
sel=3
}
#--- Intermediate case: some doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)<3 & sum(pval_dunnet<alpha1)>=1){
sel=which(pval_dunnet<alpha1)[1]
}
#--- Intermediate case 2: some doses show a trend: select the (highest) effective dose, no new recruitment for the other doses
# if(sum(pval_dunnet<alpha1)<3){
#   sel=which.min(pval_dunnet)+1
# }
#--- Best case: All doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)==3){
sel=1
}
sel <- sel+1
hyp <- get_hyp_mat(3,sel-1)
hyp <- hyp + (hyp != 0)
# (hyp)
sset_hyp1 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])])
sset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
sset_hyp3 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[3,][hyp[3,] != 0])])
sset_hyp4 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[4,][hyp[4,] != 0])])
# pvalues closed test
pvalue_anova1 <- summary(aov(y_12m ~ treat, data = sset_hyp1))[[1]][[5]][[1]]
pvalue_anova2 <- summary(aov(y_12m ~ treat, data = sset_hyp2))[[1]][[5]][[1]]
pvalue_anova3 <- summary(aov(y_12m ~ treat, data = sset_hyp3))[[1]][[5]][[1]]
pvalue_anova4 <- summary(aov(y_12m ~ treat, data = sset_hyp4))[[1]][[5]][[1]]
# c(pvalue_anova1,pvalue_anova2,pvalue_anova3,pvalue_anova4)
pvalue_stage1 <- max(pvalue_anova1,pvalue_anova2,pvalue_anova3,pvalue_anova4)
# stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sd_y=sd_y)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
pvalue_stage2 <- summary(aov(y_12m ~ treat, data = db_stage2))[[1]][[5]][[1]]
# Inverse normal combination test
combined_pvalue = 1 - pnorm(qnorm(1 - pvalue_stage1) / sqrt(2) + qnorm(1 - pvalue_stage2) / sqrt(2))
# list_res=list(db_stage1,db_stage2,sel,combined_pvalue,pvalue_stage1,pvalue_stage2)
return(list(result1=(combined_pvalue<alpha), result2=sel))
}
# Example
# sim_trial(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05)
##########################################################
##########################################################
# Run simulations
# Set a specific seed for reproducibility
set.seed(421)
# Set the number of trials to run and other parameters
n_trials <- 100000
# n_cores <- detectCores()-1  # Adjust the number of cores based on your machine's capabilities
n_cores <- availableCores()-1
# Set up the "multicore" future plan
# plan(multicore, workers = n_cores)
plan(multisession, workers = n_cores)
set <- list(
scenario1 = c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05),
scenario2 = c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05)
)
results <- future_map2(set, replicate(5, .x), fun)
results <- future_map2(set, replicate(5, .x), sim_trial)
results <- future_map(set, ~ future_map2(replicate(nsim, .x), .y, sim_trial))
results <- future_map(set, ~ future_map2(replicate(5, .x), .y, sim_trial))
# sim_trial(c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05))
results <- future_map(set, ~ pmap(replicate(5, .x), .y, sim_trial))
# sim_trial(c(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sd_y=0.1, alpha1=0.5, alpha=0.05))
results <- future_map(set, ~ future_map2(replicate(5, .x), .y, sim_trial))
# install.packages("future")
library(future)
plan(multiprocess)
plan(multisession, workers = 1)
fun <- function(x, y) {
return(x + y)
}
replicate_fun <- function(scenarios, nsim) {
results <- vector("list", length = nrow(scenarios))
for (i in 1:nrow(scenarios)) {
x <- scenarios[i, 1]
y <- scenarios[i, 2]
results[[i]] <- replicate(nsim, fun(x, y))
}
return(results)
}
# Replace "set" with your actual matrix of scenarios
set <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2, byrow = TRUE)
set
# Define the number of replications you want
nsim <- 5
# Use future_lapply for parallel execution
future::plan(multisession,workers=1)
results <- future_lapply(set, replicate_fun, nsim = nsim)
library(future.apply)
results <- future_lapply(set, replicate_fun, nsim = nsim)
# Use future_lapply for parallel execution
future::plan(multisession,workers=1)
results <- future_lapply(set, replicate_fun, nsim = nsim)
length(set)
is.matrix(set)
data.frame(set)
results <- future_lapply(data.frame(set), replicate_fun, nsim = nsim)
nrow(set)
results <- future_lapply(scenarios=set, replicate_fun, nsim = nsim)
scenarios=set
nsim)5
scenarios=set
nsim=5
results <- vector("list", length = nrow(scenarios))
for (i in 1:nrow(scenarios)) {
x <- scenarios[i, 1]
y <- scenarios[i, 2]
results[[i]] <- replicate(nsim, fun(x, y))
}
return(results)
results
set
results <- future_lapply(scenarios, replicate_fun, nsim = nsim)
rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = diag(length(mean)))
install.packages("mvtnorm")
library(mvtnorm)
sigma=diag(1,nrow = 2)
sigma=diag(1,nrow = 2)
sigma
rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = diag(length(mean)))
rmvnorm(n, mean = rep(0, nrow(sigma)), sigma = sigma )
rmvnorm(n=10, mean = rep(0, nrow(sigma)), sigma = sigma )
sigma
sigma=diag(1, nrow = 2)*sd_y
sd_y=0.1
sigma=diag(1, nrow = 2)*sd_y
sigma
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# mu=c(0,1,2,5);
mu=c(0,0,0,0);
mu_6m=mu; mu_12m=mu
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
N=N1
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
sigma=matrix(c(0.1,0,0,0.1),nrow = 2, byrow = T)
sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
mu_v=rmvnorm(n=N, mean = c(mu_6m, mu_12m), sigma = sigma )
sigma
c(mu_6m, mu_12m)
X
mu_6m
X %*% matrix(mu_6m, mu_12m, nrow=2)
X %*% matrix(mu_6m, mu_12m, nrow=2, byrow = T)
matrix(mu_6m, mu_12m, nrow=2, byrow = T)
mu_12m
mu_6m
matrix(c(mu_6m, mu_12m), nrow=2, byrow = T)
X %*% matrix(c(mu_6m, mu_12m), nrow=2, byrow = T)
X %*% matrix(c(mu_6m, mu_12m), nrow=2, byrow = F)
matrix(c(mu_6m, mu_12m), nrow=2, byrow = T)
mu_6m
X
X %*% matrix(c(mu_6m, mu_12m), nrow=2, byrow = T)
X %*% matrix(c(mu_6m), nrow=1, byrow = T)
matrix(c(mu_6m), nrow=1, byrow = T)
X %*% matrix(c(mu_6m), nrow=1, byrow = T)
X %*% matrix(c(mu_6m), nrow=4, byrow = F)
X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F)
matrix(c(mu_6m, mu_12m), nrow=4, byrow = F)
X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
summary(y)
cov(y[,1],y[,2])
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
summary(y)
cov(y[,1],y[,2])
length(mu_6m)
dim(sigma)
head8y
head(y)
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, sd_y=0.1){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat)
return(data)
}
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# mu=c(0,1,2,5);
mu=c(0,0,0,0);
mu_6m=mu; mu_12m=mu
N=N1
sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
y<- sim_data
summary(y)
y
y<- sim_data
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat)
return(data)
}
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat)
return(data)
}
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# mu=c(0,1,2,5);
mu=c(0,0,0,0);
mu_6m=mu; mu_12m=mu
N=N1
sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
y<- sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma)
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07-simulations")
source("aux-functions.R")
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat)
return(data)
}
# Settings
n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# mu=c(0,1,2,5);
mu=c(0,0,0,0);
mu_6m=mu; mu_12m=mu
N=N1
sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
y<- sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma)
summary(y)
cov(y[,1],y[,2])
30/10
rmonth = 10
N=50
N/rmonth
sample(1:N/rmonth,N)
1:N/rmonth
N/rmonth
60/4
60/7
round(60/7)
ceiling (60/7)
ceiling(8.4)
mu=c(0,0,0,0); sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T); rmonth=10
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, rmonth){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
time = sample(1:ceiling(N/rmonth),N)
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat, recruit_time = time)
return(data)
}
y=sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma, rmonth=10)
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, rmonth){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
time = sample(1:ceiling(N/rmonth),N, replace = F)
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat, recruit_time = time)
return(data)
}
y=sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma, rmonth=10)
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, rmonth){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=4, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
time = sample(1:ceiling(N/rmonth),N, replace = T)
# Output
data=data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat, recruit_time = time)
return(data)
}
y=sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma, rmonth=10)
y
summary(t)
summary(y)
require(mvtnorm)#sim_data function
mu=c(0,0,0,0); sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
y=sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma, rmonth=10)
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07-simulations")
source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/aux-functions.R")
source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
##########################################################
##########################################################
# evaluate trial duration with respect to the rmonth, also assumptions regarding the break between stages
mu=c(0,0,0,0); sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
y=sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma, rmonth=10)
# underlying dependencies
require(mvtnorm)#sim_data function
##########################################################
##########################################################
# evaluate trial duration with respect to the rmonth, also assumptions regarding the break between stages
mu=c(0,0,0,0); sigma=matrix(c(0.1,0,0,0.1), nrow = 2, byrow = T)
y=sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sigma=sigma, rmonth=10)
y
plot(y$recruit_time)
plot(1:120,y$recruit_time)
plot(y$recruit_time)
plot(y$recruit_time, 1:120)
summary(y$recruit_time)
