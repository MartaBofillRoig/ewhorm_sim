# packges needed for this script
library(future)
library(purrr)
library(furrr)
# underlying dependencies
require(mvtnorm)#sim_data function
require(multcomp)#aux functions
require(gtools)#aux functions
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
mu = c(0,0,0,0)
sigma<-sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sigma, rmonth=rmonth)
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, rmonth){
treatments <- factor(c(sample(rep(1:n_arms, floor(N/n_arms))), sample(1:n_arms, N-floor(N/n_arms)*n_arms, replace=T)),
# sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat = unname(max_col_indices)
treat = factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Recruitment
time = sample(1:ceiling(N/rmonth), N, replace = T)
# Output
data = data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat, recruit_time = time)
return(data)
}
sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sigma, rmonth=rmonth)
n_arms=4
sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sigma, rmonth=rmonth)
N=N1
treatments <- factor(c(sample(rep(1:n_arms, floor(N/n_arms))), sample(1:n_arms, N-floor(N/n_arms)*n_arms, replace=T)),
# sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
mu_6m[1:n_arms-1]
mu_6m =  mu_6m[1:n_arms-1]
mu_12m =  mu_6m
treatments <- factor(c(sample(rep(1:n_arms, floor(N/n_arms))), sample(1:n_arms, N-floor(N/n_arms)*n_arms, replace=T)),
# sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F)
X
n_arms=3
treatments <- factor(c(sample(rep(1:n_arms, floor(N/n_arms))), sample(1:n_arms, N-floor(N/n_arms)*n_arms, replace=T)),
# sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
X <- model.matrix(~ treatments - 1)
treatments <- factor(c(sample(rep(1:n_arms, floor(N/n_arms))), sample(1:n_arms, N-floor(N/n_arms)*n_arms, replace=T)),
# sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F)
X
X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F)
rmvnorm(n=N, mean = c(0,0), sigma = sigma )
library(mvtnorm)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
rmvnorm(n=N, mean = c(0,0), sigma = sigma )
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sg_m )
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
get_max_col_index <- function(row) {
return(which.max(row))
}
get_hyp_mat <- function(n_hypothesis = 3, selected_hypothesis = 1){
elements <- c(rep(0, n_hypothesis), 1:n_hypothesis)
hyp_mat <- unique(combinations(n=length(elements), r=n_hypothesis, v=elements, set = F, repeats.allowed = F))
selected_rows <- hyp_mat[which(apply(hyp_mat == selected_hypothesis, 1, any)), ]
selected_rows
}
get_max_col_index <- function(row) {
return(which.max(row))
}
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
db_stage1
mu = c(0,0,0,0)
sigma<-sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
db_stage1
n_arms
mu = c(0,0,0,0)
sigma<-sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
sel=2
sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sigma, rmonth=rmonth)
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel,4)]
db_stage2
levels(db_stage2$treat)
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
db_stage2
sel
levels(db_stage1$treat)[c(1,sel)]
is.vector(levels(db_stage1$treat)[c(1,sel)])
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
db_stage2
library(multcomp);library(ewhorm)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnet = model_dunnet$test$pvalues
#######################################
pval <- c()
for(j in 1:(n_arms-1)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
pval
#######################################
pval <- c()
j)1
j=1
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
sub1
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
coef(res1)
coef(res1)[2,3]
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
j=2
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
sub1
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
coef(res1)
n_arms
summary(db_stage1)
(db_stage1$treat==levels(db_stage1$treat)[3+1])
for(j in 1:(n_arms-2)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
z
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnet = model_dunnet$test$pvalues
#######################################
pval <- c()
for(j in 1:(n_arms-2)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
pval_dunnet
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
library(gMCP)
N=N1+N2
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
graph_bh <- BonferroniHolm(3)
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix <- doInterim(graph=graph_bh,z1=z,v=v,alpha=0.025)
z1 <- c(z,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
A_matrix
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
preplan@Aj
preplan@BJ
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sigma, rmonth=rmonth)
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sigma, rmonth=rmonth)
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,4)]
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
res2 = summary(mod2)
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,4)]
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
db_stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1)],"High")
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2 <- pt(coef(res2)[2,3], mod1$df, lower.tail = FALSE)
Avalues <- c(preplan@BJ[7], #H123
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[1]  #H3
)
pval2 <= Avalues
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
sel=2
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
recruit_time2 = max(db_stage2$recruit_time)
levels(db_stage2$treat)
Avalues <- c(preplan@BJ[7], #H123
preplan@BJ[8], #H12
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
Avalues[1,2,4,5]
Avalues[c(1,2,4,5)]
preplan
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
pval2[1] <= Avalues[c(1,2,4,5)]
pval2[2] <= Avalues[c(1,3,4,6)]
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
Avalues[c(1,3,4,6)]
for(j in 1:3){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
pval2[2] <= Avalues[c(1,3,4,6)]
for(j in 1:2){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
(db_stage2$treat==levels(db_stage2$treat)[2])
levels(db_stage2$treat)[2]
levels(db_stage2$treat)[3]
preplan
preplan@BJ[4]
preplan@BJ[3]
preplan@BJ[5]
preplan
preplan
preplan
preplan
preplan@Aj
preplan@preplanned
preplan@alpha
