rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# library(parallel)
# Settings
# n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# # mu=c(0,1,2,5);
# mu=c(0,0,0,0);
# mu_6m=mu; mu_12m=mu
# underlying dependencies
require(mvtnorm)#sim_data function
require(DescTools)#aux functions
require(gtools)#aux functions
# Example
n_arms=4
N1=120
N2=60
mu = c(0,0,0,0)
mu_6m = mu
mu_12m= mu
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
rmonth=12
alpha1=0.5
alpha=0.05
p_safety=c(0.9,0.8,0.7)
safety=T
simulated_data <- ewhorm::sim_data(n_arms = 4,
N = 30 * 4,
mu_6m = mu,
mu_12m= mu,
sigma=sg_m,
rmonth = 12)
head(simulated_data,10)
summary(simulated_data$recruit_time)
##########################################################
##########################################################
# evaluate trial duration with respect to the rmonth, also assumptions regarding the break between stages
summary(simulated_data$recruit_time)
sim_trial(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=diag(0.5,2), alpha1=0.5, alpha=0.05,rmonth = 12)
##########################################################
##########################################################
# Run simulations
# Set a specific seed for reproducibility
set.seed(421)
# Set the number of trials to run and other parameters
n_trials <- 1000
# 00
# n_cores <- detectCores()-1  # Adjust the number of cores based on your machine's capabilities
n_cores <- availableCores()-1
# Set up the "multicore" future plan
# plan(multicore, workers = n_cores)
plan(multisession, workers = n_cores)
# Run the simulations in parallel using future_map
results_list <- future_map(1:n_trials, function(i) sim_trial(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, alpha1=0.1, alpha=0.05,rmonth = 12), .options=furrr_options(seed = TRUE))
# Extract the two sets of results from the list
result1_values <- sapply(results_list, function(x) x$result1)
result2_values <- sapply(results_list, function(x) x$result2)
safety_values <- sapply(results_list, function(x) x$safety)
# Calculate the means
mean_result1 <- mean(result1_values)
summary_result2 <- table(as.factor(result2_values))
mean_safety <- mean(safety_values)
# Print the means
cat("Type 1 error:", mean_result1, "\n")
cat("Selected dose:", summary_result2, "\n")
cat("Safety selected dose:", mean_safety, "\n")
# Example
n_arms=4
N1=120
N2=60
mu = c(0,0,0,0)
mu_6m = mu
mu_12m= mu
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
rmonth=12
alpha1=0.5
alpha=0.05
p_safety=c(0.9,0.8,0.7)
safety=T
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu_6m, mu_12m=mu_12m, sigma=sigma, rmonth=rmonth)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# library(parallel)
# Settings
# n_arms=4; N1=30*4; N2=30*2; sd_y=0.1; alpha1=0.5
# # mu=c(0,1,2,5);
# mu=c(0,0,0,0);
# mu_6m=mu; mu_12m=mu
# underlying dependencies
require(mvtnorm)#sim_data function
require(DescTools)#aux functions
require(gtools)#aux functions
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu_6m, mu_12m=mu_12m, sigma=sigma, rmonth=rmonth)
n_arms
N1
mu_6m
mu_12m
sigma
sigma=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
rmonth
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu_6m, mu_12m=mu_12m, sigma=sigma, rmonth=rmonth)
db_stage1
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
res_stage1
pval_dunnet = res_stage1$Placebo[,4]
pval_dunnet
pval_dunnet = res_stage1$Placebo[,4]
pval_dunnet
# Safety
if(safety==T){
safety_dose1 <- (runif(1)<p_safety[1])
safety_dose2 <- (runif(1)<p_safety[2])
safety_dose3 <- (runif(1)<p_safety[3])
}
# if safety_dose(i) is true, then consider safe
safety=c(safety_dose1,safety_dose2,safety_dose3)
safety
#--- Worst case: No trend is seen in any of the doses (e.g., all p> alpha1): select highest dose
if(sum(pval_dunnet>alpha1)==3){
sel=3
}
#--- Intermediate case: some doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)<3 & sum(pval_dunnet<alpha1)>=1){
sel=which(pval_dunnet<alpha1)[1]
}
#--- Intermediate case 2: some doses show a trend: select the (highest) effective dose, no new recruitment for the other doses
# if(sum(pval_dunnet<alpha1)<3){
#   sel=which.min(pval_dunnet)+1
# }
#--- Best case: All doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)==3){
sel=1
}
sel <- sel+1
sel
hyp <- get_hyp_mat(3,sel-1)
hyp <- hyp + (hyp != 0)
hyp
sset_hyp1 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])])
summary(sset_hyp1)
sset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
summary(sset_hyp2)
# pvalues closed test
pvalue_Dunnett1 <- min(DunnettTest(x=sset_hyp1$y_12m, g=sset_hyp1$treat)$Placebo[,4])
DunnettTest(x=sset_hyp1$y_12m, g=sset_hyp1$treat)$Placebo[,4]
DunnettTest(x=sset_hyp1$y_12m, g=sset_hyp1$treat)
DunnettTest(x=sset_hyp2$y_12m, g=sset_hyp2$treat)
pvalue_Dunnett2 <- min(DunnettTest(x=sset_hyp2$y_12m, g=sset_hyp2$treat)$Placebo[,4])
pvalue_Dunnett3 <- min(DunnettTest(x=sset_hyp3$y_12m, g=sset_hyp3$treat)$Placebo[,4])
pvalue_Dunnett4 <- min(DunnettTest(x=sset_hyp4$y_12m, g=sset_hyp4$treat)$Placebo[,4])
#
pvalue_stage1 <- max(pvalue_Dunnett1,pvalue_Dunnett2,pvalue_Dunnett3,pvalue_Dunnett4)
# stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
db_stage2
sel
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
db_stage2
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
db_stage2
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
pvalue_stage2 <- summary(aov(y_12m ~ treat, data = db_stage2))[[1]][[5]][[1]]
pvalue_stage2
summary(aov(y_12m ~ treat, data = db_stage2))
pvalue_stage2
summary(lm(y_12m ~ treat, data = db_stage2))
pvalue_stage2 <- summary(aov(y_12m ~ treat, data = db_stage2))[[1]][[5]][[1]]
# Inverse normal combination test
combined_pvalue = 1 - pnorm(qnorm(1 - pvalue_stage1) / sqrt(2) + qnorm(1 - pvalue_stage2) / sqrt(2))
# Inverse normal combination test
combined_pvalue = 1 - pnorm(qnorm(1 - pvalue_stage1) / sqrt(2) + qnorm(1 - pvalue_stage2) / sqrt(2))
(combined_pvalue<alpha)
combined_pvalue
(combined_pvalue<.05)
# Inverse normal combination test
combined_pvalue = 1 - pnorm(qnorm(1 - pvalue_stage1) / sqrt(2) + qnorm(1 - pvalue_stage2) / sqrt(2))
pvalue_stage2
summary(aov(y_12m ~ treat, data = db_stage2))
t.test(y_12m ~ treat, data = db_stage2)
pvalue_stage2 <- summary(t.test(y_12m ~ treat, data = db_stage2,alternative = c("less")))[[1]][[5]][[1]]
t.test(y_12m ~ treat, data = db_stage2, alternative = c("less"))
t.test(y_12m ~ treat, data = db_stage2, alternative = c("less"))t<-
t<-t.test(y_12m ~ treat, data = db_stage2, alternative = c("less"))
# stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
pvalue_stage2 <- t.test(y_12m ~ treat, data = db_stage2, alternative = c("less"))$p.value
# Function to simulate trial data (2-stages, with dose selection)
sim_trial <- function(n_arms=4, N1=30*4, N2=30*2, mu_6m, mu_12m, sigma, rmonth, alpha1=0.5, alpha=0.05, p_safety=c(0.9,0.8,0.7), safety=T){
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu_6m, mu_12m=mu_12m, sigma=sigma, rmonth=rmonth)
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
pval_dunnet = res_stage1$Placebo[,4]
# Safety
if(safety==T){
safety_dose1 <- (runif(1)<p_safety[1])
safety_dose2 <- (runif(1)<p_safety[2])
safety_dose3 <- (runif(1)<p_safety[3])
}
# if safety_dose(i) is true, then consider safe
safety=c(safety_dose1,safety_dose2,safety_dose3)
# Selection
#--- Arms indicators: 1: Low; 2: Medium, 3:High
#--- Worst case: No trend is seen in any of the doses (e.g., all p> alpha1): select highest dose
if(sum(pval_dunnet>alpha1)==3){
sel=3
}
#--- Intermediate case: some doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)<3 & sum(pval_dunnet<alpha1)>=1){
sel=which(pval_dunnet<alpha1)[1]
}
#--- Intermediate case 2: some doses show a trend: select the (highest) effective dose, no new recruitment for the other doses
# if(sum(pval_dunnet<alpha1)<3){
#   sel=which.min(pval_dunnet)+1
# }
#--- Best case: All doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(pval_dunnet<alpha1)==3){
sel=1
}
sel <- sel+1
hyp <- get_hyp_mat(3,sel-1)
hyp <- hyp + (hyp != 0)
# (hyp)
sset_hyp1 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])])
sset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
sset_hyp3 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[3,][hyp[3,] != 0])])
sset_hyp4 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[4,][hyp[4,] != 0])])
# pvalues closed test
pvalue_Dunnett1 <- min(DunnettTest(x=sset_hyp1$y_12m, g=sset_hyp1$treat)$Placebo[,4])
pvalue_Dunnett2 <- min(DunnettTest(x=sset_hyp2$y_12m, g=sset_hyp2$treat)$Placebo[,4])
pvalue_Dunnett3 <- min(DunnettTest(x=sset_hyp3$y_12m, g=sset_hyp3$treat)$Placebo[,4])
pvalue_Dunnett4 <- min(DunnettTest(x=sset_hyp4$y_12m, g=sset_hyp4$treat)$Placebo[,4])
#
pvalue_stage1 <- max(pvalue_Dunnett1,pvalue_Dunnett2,pvalue_Dunnett3,pvalue_Dunnett4)
# stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,sel)], mu_12m=mu_12m[c(1,sel)], sigma=sigma, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
pvalue_stage2 <- t.test(y_12m ~ treat, data = db_stage2, alternative = c("less"))$p.value
# Inverse normal combination test
combined_pvalue = 1 - pnorm(qnorm(1 - pvalue_stage1) / sqrt(2) + qnorm(1 - pvalue_stage2) / sqrt(2))
# list_res=list(db_stage1,db_stage2,sel,combined_pvalue,pvalue_stage1,pvalue_stage2)
return(list(result1=(combined_pvalue<alpha), result2=sel, safety=safety))
}
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, rmonth){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat = unname(max_col_indices)
treat = factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Recruitment
time = sample(1:ceiling(N/rmonth), N, replace = T)
# Output
data = data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat, recruit_time = time)
return(data)
}
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg")
# Copy in R folder the functions of the r package
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg", cran = TRUE, manual = TRUE, incoming = TRUE)
devtools::build_manual(pkg = "C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg", path = NULL)
rm(list = ls())
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# library(parallel)
