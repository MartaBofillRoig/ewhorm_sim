data2 <- data.frame(t,hz,LI,LS)
hzh
hzh
summary(times)
summary(time)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
#
set.seed(148)
library(ggplot2)
library(rms)
event_times_beft <- -log(u)/(lambda*exp(beta_cov*cov1))
sum(event_times_beft<.5)
sum(event_times_beft>.5)
sum(event_times_beft>1)
sum(event_times_beft<1)
sum(event_times_beft<1)
(event_times_beft<1)
event_times_beft[event_times_beft<1]
summary(event_times_beft[event_times_beft<1])
event_times_aftt[event_times_beft>.75]
n <- 5000
u <- runif(n)
group <- sample(rep(c(0,1), n/2))
cov1 <- sample(0:1, n, replace=T)
#
t_s <- .75
lambda <- 1/10
beta_gr <- log(.7)
beta_cov <- log(.8)
event_times_beft <- -log(u)/(lambda*exp(beta_cov*cov1))
event_times_aftt <- -log(u)/(lambda*exp(beta_gr*group+beta_cov*cov1))
event_times <- c(event_times_beft[event_times_beft<t_s], event_times_aftt[event_times_beft>t_s])
censor_times <- runif(n, min=0, max=10)
summary(event_times_beft)
summary(event_times_beft[event_times_beft<t_s])
event_times_beft[event_times_beft<t_s]
(event_times_beft<t_s)
which(event_times_beft<t_s)
event_times_beft[event_times_beft<t_s]
event_times_beft[which(event_times_beft<t_s)]
event_times_beft[event_times_beft<t_s][1:3]
event_times_beft[which(event_times_beft<t_s)][1:3]
length(event_times_beft[event_times_beft<t_s])
length(event_times_beft[which(event_times_beft<t_s)])
event_times <- c(event_times_beft[event_times_beft<t_s], event_times_aftt[event_times_aftt>t_s])
group <- c(group[which(event_times_beft<t_s)], group[which(event_times_aftt>t_s)])
length(event_times)
length(grou`p`)
length(group)
hzh
knitr::opts_chunk$set(
collapse = TRUE,
# echo=FALSE,
comment = "#>"
)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
#
set.seed(148)
library(ggplot2)
library(rms)
head(data)
coxph(Surv(time, status) ~ group + cov1, data = data)
data
data(as)
library(RBesT)
data(as)
data(AS)
View(AS)
AS
map_mcmc <- gMAP(cbind(r, n-r) ~ 1 | study,
family = binomial, data = AS, tau.dist = "HalfNormal", tau.prior = 1, beta.prior = cbind(0, 2))
map_mcmc
dat <- crohn
crohn_sigma <- 88
dat$y.se <- crohn_sigma/sqrt(dat$n)
dat
# prior
set.seed(689654)
map_mcmc <- gMAP(cbind(y, y.se) ~ 1 | study,
weights=n,data=dat,
family=gaussian,
beta.prior=cbind(0, crohn_sigma),
tau.dist="HalfNormal",tau.prior=cbind(0,crohn_sigma/2))
print(map_mcmc)
pl <- plot(map_mcmc)
pl
data <- datasim_cont(num_arms = 5, n_arm = 100, d = c(0, 100, 250, 300, 350),
theta = rep(0.25, 5), lambda = rep(0.15, 6),
sigma = 1, trend = "linear")
head(data)
summary(data)
library(NCC)
set.seed(342)
data <- datasim_cont(num_arms = 5, n_arm = 100, d = c(0, 100, 250, 300, 350),
theta = rep(0.25, 5), lambda = rep(0.15, 6),
sigma = 1, trend = "linear")
head(data)
summary(data)
## get concurrent and non-concurrent controls of treatment = arm
arm=5
cc <- data[data$treatment == 0 & data$period > treatment_start_period[arm + 1] - 1 & data$period < treatment_end_period[arm + 1] + 1, ]
data
# Data preparation
## count number of patients for each treatment in each period
tab_count <- table(data$treatment, data$period)
tab_count
## count number of groups and number of periods
number_of_groups <- dim(table(data$treatment, data$period))[1] # number of groups incl control
number_of_periods <- dim(table(data$treatment, data$period))[2] #total number of periods
## get start and end period of each treatment
treatment_start_period <- numeric(number_of_groups)
treatment_end_period <- numeric(number_of_groups)
for (i in 1:number_of_groups){
treatment_start_period[i] <- min(which(table(data$treatment, data$period)[i,] > 0))
treatment_end_period[i] <- max(which(table(data$treatment, data$period)[i,] > 0))
}
treatment_start_period
treatment_end_period
## get concurrent and non-concurrent controls of treatment = arm
cc <- data[data$treatment == 0 & data$period > treatment_start_period[arm + 1] - 1 & data$period < treatment_end_period[arm + 1] + 1, ]
ncc <- data[data$treatment == 0 & data$period < treatment_start_period[arm + 1], ]
cc
dim(cc)
## get concurrent and non-concurrent controls of treatment = arm
cc <- data[data$treatment == 0 & (data$period > treatment_start_period[arm + 1] - 1) & (data$period < treatment_end_period[arm + 1] + 1), ]
dim(cc)
ncc <- data[data$treatment == 0 & data$period < treatment_start_period[arm + 1], ]
tab_count
summary(cc)
summary(ncc)
plot_trial(treatments = data$treatment)
## get concurrent and non-concurrent controls of treatment = arm
cc <- data[data$treatment == 0 & (data$period > treatment_start_period[arm + 1] - 1) & (data$period < treatment_end_period[arm + 1] + 1), ]
dim(cc)
ncc <- data[data$treatment == 0 & data$period < treatment_start_period[arm + 1], ]
summary(cc)
summary(ncc)
treatment_start_period[arm + 1]
i=1
ncc_period <- subset(ncc, data$period==i)
summary(ncc_period)
ncc_period <- ncc[data$period==i,]
summary(ncc_period)
data$period
treatment_start_period[arm + 1]-1
ncc_period <- ncc[data$period==1,]
treatment_start_period[arm + 1]-1
summary(ncc_period)
data$period==1
data$period
ncc_period <- ncc[ncc$period==1,]
summary(ncc_period)
ncc_data <- data.frame(study=c(), n=c(), y=c(), y.se=c())
i=1
ncc_period <- ncc[ncc$period==i,]
## get summary data of treatment group and concurrent controls
y_p <- mean(ncc_period$response)
n_p <- length(ncc_period$response)
y_pse <- sd(ncc_period$response)/sqrt(n_p)
summary(ncc_period)
y_p
n_p
y_pse <- sd(ncc_period$response)/sqrt(n_p)
ncc_data[1,] <- c(i,n_p,y_p,y_pse)
ncc_data[,1] <- c(i,n_p,y_p,y_pse)
c(i,n_p,y_p,y_pse)
ncc_data <- data.frame(study=c(0), n=c(0), y=c(0), y.se=c(0))
ncc_data[,1] <- c(i,n_p,y_p,y_pse)
ncc_data[1,] <- c(i,n_p,y_p,y_pse)
ncc_data
ncc_data <- data.frame(period=c(0), n=c(0), y=c(0), y.se=c(0))
for(i in 1: treatment_start_period[arm + 1]-1){
ncc_period <- ncc[ncc$period==i,]
## get summary data of treatment group and concurrent controls
y_p <- mean(ncc_period$response)
n_p <- length(ncc_period$response)
y_pse <- sd(ncc_period$response)/sqrt(n_p)
ncc_data[1,] <- c(i,n_p,y_p,y_pse)
}
N_std = length(unique(ncc$period))
N_std
y = sapply(unique(ncc$period), function(x) mean(ncc[ncc$period == x, ]$response))
y
se = sapply(unique(ncc$period), function(x) sd(ncc[ncc$period == x, ]$response)/sqrt(length(ncc[ncc$period == x, ]$response)))
se
# prior
map_mcmc <- gMAP(cbind(y, y.se) ~ 1 | study,
weights=n,data=dat,
family=gaussian,
beta.prior=cbind(0, crohn_sigma),
tau.dist="HalfNormal",tau.prior=cbind(0,crohn_sigma/2))
# RBesT
# toy example
library(NCC)
set.seed(342)
#
data <- datasim_cont(num_arms = 5, n_arm = 100, d = c(0, 100, 250, 300, 350),
theta = rep(0.25, 5), lambda = rep(0.15, 6),
sigma = 1, trend = "linear")
head(data)
summary(data)
plot_trial(treatments = data$treatment)
#
arm=5
# Data preparation
## count number of patients for each treatment in each period
tab_count <- table(data$treatment, data$period)
## count number of groups and number of periods
number_of_groups <- dim(table(data$treatment, data$period))[1] # number of groups incl control
number_of_periods <- dim(table(data$treatment, data$period))[2] #total number of periods
## get start and end period of each treatment
treatment_start_period <- numeric(number_of_groups)
treatment_end_period <- numeric(number_of_groups)
for (i in 1:number_of_groups){
treatment_start_period[i] <- min(which(table(data$treatment, data$period)[i,] > 0))
treatment_end_period[i] <- max(which(table(data$treatment, data$period)[i,] > 0))
}
## get concurrent and non-concurrent controls of treatment = arm
cc <- data[data$treatment == 0 & (data$period > treatment_start_period[arm + 1] - 1) & (data$period < treatment_end_period[arm + 1] + 1), ]
dim(cc)
ncc <- data[data$treatment == 0 & data$period < treatment_start_period[arm + 1], ]
summary(cc)
summary(ncc)
# summary per period
ncc_data <- data.frame(period=c(0), n=c(0), y=c(0), y.se=c(0))
for(i in 1: treatment_start_period[arm + 1]-1){
ncc_period <- ncc[ncc$period==i,]
y_p <- mean(ncc_period$response)
n_p <- length(ncc_period$response)
y_pse <- sd(ncc_period$response)/sqrt(n_p)
ncc_data[1,] <- c(i,n_p,y_p,y_pse)
}
# N_std = length(unique(ncc$period)),
# y = sapply(unique(ncc$period), function(x) mean(ncc[ncc$period == x, ]$response)),
# se = sapply(unique(ncc$period), function(x) sd(ncc[ncc$period == x, ]$response)/sqrt(length(ncc[ncc$period == x, ]$response)))
# prior
sigma=1
map_mcmc <- gMAP(cbind(y, y.se) ~ 1 | period,
weights=n,data=ncc_data,
family=gaussian,
beta.prior=cbind(0, sigma),
tau.dist="HalfNormal",tau.prior=cbind(0, sigma/2))
print(map_mcmc)
pl <- plot(map_mcmc)
pl
ncc_data
# summary per period
ncc_data <- data.frame(period=c(0), n=c(0), y=c(0), y.se=c(0))
for(i in 1: treatment_start_period[arm + 1]-1){
ncc_period <- ncc[ncc$period==i,]
y_p <- mean(ncc_period$response)
n_p <- length(ncc_period$response)
y_pse <- sd(ncc_period$response)/sqrt(n_p)
ncc_data[1,] <- c(i,n_p,y_p,y_pse)
}
# prior
sigma=1
map_mcmc <- gMAP(cbind(y, y.se) ~ 1 | period,
weights=n,data=ncc_data,
family=gaussian,
beta.prior=cbind(0, sigma),
tau.dist="HalfNormal",tau.prior=cbind(0, sigma/2))
print(map_mcmc)
pl <- plot(map_mcmc)
pl
ncc_data
# summary per period
ncc_data <- data.frame(period=c(0), n=c(0), y=c(0), y.se=c(0))
for(i in 1: treatment_start_period[arm + 1]-1){
ncc_period <- ncc[ncc$period==i,]
y_p <- mean(ncc_period$response)
n_p <- length(ncc_period$response)
y_pse <- sd(ncc_period$response)/sqrt(n_p)
ncc_data[i,] <- c(i,n_p,y_p,y_pse)
}
# N_std = length(unique(ncc$period)),
# y = sapply(unique(ncc$period), function(x) mean(ncc[ncc$period == x, ]$response)),
# se = sapply(unique(ncc$period), function(x) sd(ncc[ncc$period == x, ]$response)/sqrt(length(ncc[ncc$period == x, ]$response)))
# prior
sigma=1
map_mcmc <- gMAP(cbind(y, y.se) ~ 1 | period,
weights=n,data=ncc_data,
family=gaussian,
beta.prior=cbind(0, sigma),
tau.dist="HalfNormal",tau.prior=cbind(0, sigma/2))
print(map_mcmc)
pl <- plot(map_mcmc)
pl
map <- automixfit(map_mcmc)
print(map)
map_robust <- robustify(map, weight=0.2, mean=0.101)
map <- automixfit(map_mcmc)
print(map)
map_robust <- robustify(map, weight=0.2, mean=0.101)
map_robust <- robustify(map, weight=0.2, mean=0.1)
print(map_robust)
plot(map)$mix
map_robust <- robustify(map, weight=0.2, mean=0.1)
map_robust <- robustify(map, weight=0.1, mean=0.1)
map_robust <- robustify(map, weight=0.3, mean=0.1)
map_robust <- robustify(map, weight=0.2, mean=0.2)
map_robust <- robustify(map, weight=0.2, mean=0.25)
map
print(map_mcmc)
map_mcmc
map_mcmc$fit
map_mcmc$model
map_mcmc$X
map_mcmc$data
map_mcmc$REdist
map_mcmc$t.df
map_mcmc$family
map_mcmc$est_strat()
map_mcmc$est_strat
map_mcmc$formula
map_mcmc$data
map_mcmc$model
map_mcmc$theta.strat
map_mcmc$theta_resp.strat
map_mcmc$theta.pooled
map_mcmc$tau.strata.pred
summary(map_mcmc)
map_mcmc$tau.strata.pred
summary(map_mcmc)[4,]
summary(map_mcmc)
summary(map_mcmc)[4]
summary(map_mcmc)[5]
summary(map_mcmc)[4]
summary(map_mcmc)$theta
summary(map_mcmc)$theta[1]
round(summary(map_mcmc)$theta[1])
round(summary(map_mcmc)$theta[1],3)
map_mcmc
summary(map_mcmc)
summary(map_mcmc)$theta_resp_pred
summary(map_mcmc)[1]
summary(map_mcmc)[2]
summary(map_mcmc)[3]
summary(map_mcmc)[3][1]
summary(map_mcmc)[3][1][1]
summary(map_mcmc)[3]
summary(map_mcmc)[3,1]
summary(map_mcmc)[3][1]
is.vector(summary(map_mcmc)[3])
summary(map_mcmc)[3]
summary(map_mcmc)[3][1]
summary(map_mcmc)[3][[1]]
summary(map_mcmc)[3][1]
summary(map_mcmc)[3]
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.1)
print(map_robust)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.3, mean=0.1)
print(map_robust)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.1)
print(map_robust)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.2)
print(map_robust)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.1)
print(map_robust)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0)
print(map_robust)
map <- automixfit(map_mcmc)
print(map)
plot(map)$mix
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0)
print(map_robust)
library(NCC)
set.seed(342)
#
data <- datasim_cont(num_arms = 5, n_arm = 100, d = c(0, 100, 250, 300, 350),
theta = rep(0.25, 5), lambda = rep(0.15, 6),
sigma = 1, trend = "linear")
plot_trial(treatments = data$treatment)
#
arm=5
# Data preparation
## count number of patients for each treatment in each period
tab_count <- table(data$treatment, data$period)
tab_count
# Data preparation
## count number of patients for each treatment in each period
tab_count <- table(data$treatment, data$period)
## count number of groups and number of periods
number_of_groups <- dim(table(data$treatment, data$period))[1] # number of groups incl control
number_of_periods <- dim(table(data$treatment, data$period))[2] #total number of periods
## get start and end period of each treatment
treatment_start_period <- numeric(number_of_groups)
treatment_end_period <- numeric(number_of_groups)
for (i in 1:number_of_groups){
treatment_start_period[i] <- min(which(table(data$treatment, data$period)[i,] > 0))
treatment_end_period[i] <- max(which(table(data$treatment, data$period)[i,] > 0))
}
## get concurrent and non-concurrent controls of treatment = arm
cc <- data[data$treatment == 0 & (data$period > treatment_start_period[arm + 1] - 1) & (data$period < treatment_end_period[arm + 1] + 1), ]
dim(cc)
ncc <- data[data$treatment == 0 & data$period < treatment_start_period[arm + 1], ]
summary(cc)
summary(ncc)
# summary per period
ncc_data <- data.frame(period=c(0), n=c(0), y=c(0), y.se=c(0))
for(i in 1: treatment_start_period[arm + 1]-1){
ncc_period <- ncc[ncc$period==i,]
y_p <- mean(ncc_period$response)
n_p <- length(ncc_period$response)
y_pse <- sd(ncc_period$response)/sqrt(n_p)
ncc_data[i,] <- c(i,n_p,y_p,y_pse)
}
ncc_data
map_mcmc <- gMAP(cbind(y, y.se) ~ 1 | period,
weights=n, data=ncc_data,
family=gaussian,
beta.prior=cbind(0, sigma), #prior_prec_eta
tau.dist="HalfNormal", tau.prior=cbind(0, sigma/2)) #prior_prec_tau
print(map_mcmc)
pl <- plot(map_mcmc)
pl
map <- automixfit(map_mcmc)
print(map)
plot(map)$mix
plot(map)$mix
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0)
summary(map_mcmc)[3]
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.09)
summary(map_mcmc)[3]
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.1)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0.1)
print(map_robust)
# consider mean of the map
# summary(map_mcmc)[3]
map_robust <- robustify(map, weight=0.2, mean=0)
print(map_robust)
tab_count
ncc
ncc_data
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# underlying dependencies
require(mvtnorm)#sim_data function
require(multcomp)#aux functions
require(gtools)#aux functions
##########################################################
##########################################################
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
db <- ewhorm::sim_data(n_arms = 4,
N = 30 * 4,
mu_6m = mu,
mu_12m= mu,
sigma=diag(1,2),
rmonth =12)
summary(db)
##########################################################
##########################################################
set.seed(32)
# evaluate trial duration with respect to the rmonth, also assumptions regarding the break between stages
v=c(0,0,0)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2,
alpha1=0.1, alpha=0.05, v=v)
sim_trial_pce
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
