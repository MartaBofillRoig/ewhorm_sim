Response <- rnorm(n, mean = 10 + as.numeric(FactorA) * 2 + as.numeric(FactorB) * 3 + as.numeric(FactorA) *as.numeric(FactorB), sd = 2)
data <- data.frame(FactorA, FactorB, Response)
model <- lm(Response ~ FactorA * FactorB, data = data)
summary(model)
set.seed(123)  # Set seed for reproducibility
n <- 10000       # Number of observations
FactorA <- factor(sample(letters[1:2], n, replace = TRUE))
FactorB <- factor(sample(letters[3:4], n, replace = TRUE))
Response <- rnorm(n, mean = 10 + as.numeric(FactorA) * 2 + as.numeric(FactorB) * 3 + as.numeric(FactorA) *as.numeric(FactorB), sd = 2)
data <- data.frame(FactorA, FactorB, Response)
model <- lm(Response ~ FactorA * FactorB, data = data)
summary(model)
library(ggplot2)
ggplot(data, aes(x = FactorA, y = Response, color = FactorB)) +
geom_boxplot() +
labs(title = "Interaction Plot", x = "Factor A", y = "Response")
set.seed(123)  # Set seed for reproducibility
n <- 10000       # Number of observations
FactorA <- factor(sample(letters[1:2], n, replace = TRUE))
FactorB <- factor(sample(letters[3:4], n, replace = TRUE))
Response <- rnorm(n, mean = as.numeric(FactorA) * 2 + as.numeric(FactorB) * 3 + as.numeric(FactorA) *as.numeric(FactorB), sd = 2)
data <- data.frame(FactorA, FactorB, Response)
model <- lm(Response ~ FactorA * FactorB, data = data)
summary(model)
FactorA
library(gMCP)
c(.5,.5)*.5
p1=c(.1,.12,.21)
z1 <- qnorm(1-p1)
v <- c(1/2,1/2,0)*(N1/N)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
graph_bh <- BonferroniHolm(3)
p1=c(.1,.12,.21)
z1 <- qnorm(1-p1)
v <- c(1/2,1/2,0)*(N1/N)
N=N1+N2
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
graph_bh <- BonferroniHolm(3)
p1=c(.1,.12,.21)
z1 <- qnorm(1-p1)
v <- c(1/2,1/2,0)*(N1/N)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
A_matrix
z1
1-pnorm((z_gamma-w1*z1[1])/w2)
z_gamma <- qnorm(1-.025)
w1=sqrt(N1/N)
w2=sqrt(N2/N)
1-pnorm((z_gamma-w1*z1[1])/w2)
A_matrix@Aj
1-pnorm((z_gamma-w1*z1[1])/w2)
1-pnorm((z_gamma-w1*z1[2])/w2)
graph_bh <- BonferroniHolm(3)
graph_bh
Bonferroni(3)
graph_bh <- BonferroniHolm(3)
p1=c(.1,.12,.21)
z1 <- qnorm(1-p1)
v <- c(1/4,1/4,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
A_matrix
graph_bh
z_gamma <- qnorm(1-.025)
w1=sqrt(N1/2/N)
w2=sqrt((1-N1/2)/N)
z_gamma <- qnorm(1-.025)
w1=sqrt(N1/2/N)
w2=sqrt((1-N1)/2/N)
z_gamma <- qnorm(1-.025)
w1=sqrt(N1/2/N)
w2=sqrt((1-N1/2)/N)
z_gamma <- qnorm(1-.025)
w1=sqrt(N1/2/N)
w2=sqrt(1-N1/2/N)
1-pnorm((z_gamma-w1*z1[2])/(w2))
A_matrix
A_matrix@Aj
1-pnorm((z_gamma-w1*z1[2])/(w2))
1-pnorm((z_gamma-w1*z1[1])/(w2))
w2=sqrt((N-N1/2)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
1-pnorm((z_gamma-w1*z1[2])/(w2))
1-pnorm((z_gamma-w1*z1[3])/(w2))
p1=c(.1,.12,0)
z1
p1=c(.1,.12,-100)
z1 <- qnorm(1-p1)
p1=c(.1,.12,100)
z1 <- qnorm(1-p1)
p1=c(.1,.12,1)
z1 <- qnorm(1-p1)
z1
p1=c(.1,.12)
z1 <- c(qnorm(1-p1),0)
1-pnorm((z_gamma-w1*z1[2])/(w2))
z1
1-pnorm((z_gamma-w1*z1[3])/(w2))
z_gamma <- qnorm(1-.025)
n=(N1/2)/2
w1=sqrt(n1/N)
z_gamma <- qnorm(1-.025)
n1=(N1/2)/2
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[3])/(w2))
1-pnorm((z_gamma-w1*z1[2])/(w2))
A_matrix
1-pnorm((z_gamma-w1*z1[1])/(w2))
z_gamma <- qnorm(1-.025)
n1=N1/3
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
z_gamma <- qnorm(1-.025)
n1=N1/3
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
n1=N1/2
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
z_gamma <- qnorm(1-.025)
n1=N1/2/3
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
z_gamma <- qnorm(1-.025)
n1=N1/2/3
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
z_gamma <- qnorm(1-.025)
n1=N1/2/4
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
p1=c(.1,.12)
z1 <- c(qnorm(1-p1),0)
v <- c(n1,n1,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
p1=c(.1,.12)
z1 <- c(qnorm(1-p1),0)
v <- c(n1/N,n1/N,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
z_gamma <- qnorm(1-.025)
n1=N1/2/3
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
z_gamma <- qnorm(1-.025)
n1=N1/2/3
w1=sqrt(n1/N/2)
w2=sqrt((N-n1)/N/2)
1-pnorm((z_gamma-w1*z1[1])/(w2))
A_matrix@Aj
p1=c(.1,.12)
z1 <- c(qnorm(1-p1),0)
v <- c(1/4,1/4,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
z_gamma <- qnorm(1-.025)
n1=N1/2/3
w1=sqrt(n1/N/2)
w2=sqrt((N-n1)/N/2)
1-pnorm((z_gamma-w1*z1[1])/(w2))
N=(N1+N2)/3
n1=N/2
N=(N1+N2)/3
n1=N/2
w1=sqrt(n1/N/2)
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
v <- c(1/2,1/2,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
z_gamma <- qnorm(1-.025)
N=(N1+N2)/3
n1=N/2
w1=sqrt(n1/N)
w2=sqrt((N-n1)/N)
1-pnorm((z_gamma-w1*z1[1])/(w2))
1-pnorm((z_gamma-w1*z1[2])/(w2))
db_stage1
sim_data <- function(n_arms, N, mu_6m, mu_12m, sigma, rmonth){
treatments <- factor(c(sample(rep(1:n_arms, floor(N/n_arms))), sample(1:n_arms, N-floor(N/n_arms)*n_arms, replace=T)),
# sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
y <- X %*% matrix(c(mu_6m, mu_12m), nrow=n_arms, byrow = F) + rmvnorm(n=N, mean = c(0,0), sigma = sigma )
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat = unname(max_col_indices)
treat = factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Recruitment
time = sample(1:ceiling(N/rmonth), N, replace = T)
# Output
data = data.frame(y_6m=y[,1], y_12m=y[,2], treat=treat, recruit_time = time)
return(data)
}
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
library(mvtnorm)
library(ewhorm)
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
db_stage1
head(db_stage1)
lm(y_6m~treat,data=db_stage1)
summary(lm(y_6m~treat,data=db_stage1))
# stage1
db_stage1 = sim_data(n_arms=n_arms-2, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
summary(lm(y_6m~treat,data=db_stage1))
summary(lm(y_6m~treat,data=db_stage1))
n_arms
n_arms=3
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
summary(lm(y_6m~treat,data=db_stage1))
(-0.680)^2
model=summary(lm(y_6m~treat,data=db_stage1))
model$terms
model$coefficients
model$coefficients$[3,2]
model$coefficients[3,2]
model$coefficients[2,3]
db_stage1
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
library(ewhorm)
sim_data()
sim_data
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
head(db_stage1)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
model_dunnet
library(multcomp)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
model_dunnet
# model_dunnet
pval_dunnet = model_dunnet$test$pvalues
pval_dunnet
z=qnorm(1-pval_dunnet)
z
z[[1]]
z[1]
z[2]
library(multcomp);library(ewhorm)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnet = model_dunnet$test$pvalues
z = qnorm(1-pval_dunnet)
head(db_stage1 )
model_dunnet
pval_dunnet
z
lm(y_6m ~ treat, db_stage1)
summary(lm(y_6m ~ treat, db_stage1))
summary(lm(y_6m ~ treat, db_stage1))
res = summary(lm(y_6m ~ treat, db_stage1))
coef(res)
coef(res)[1,3]
coef(res)[2,3]
mod = lm(y_6m ~ treat, db_stage1)
res = summary(mod)
pt(coef(res)[2,3], mod$df, lower.tail = FALSE)
res
pt(coef(res)[2:3,3], mod$df, lower.tail = FALSE)
coef(res)[2:3,3]
pt(coef(res)[2:3,3], mod$df, lower.tail = FALSE)
coef(res)[2,3]n_arms-1
n_arms-1
pval <- pt(coef(res)[2:n_arms-1,3], mod$df, lower.tail = FALSE)
pval
pval_dunnet
res
coef(res)[2:n_arms-1,3]
2:n_arms-1
2:(n_arms-1)
pval <- pt(coef(res)[2:(n_arms-1),3], mod$df, lower.tail = FALSE)
pval_dunnet
pval
model_dunnet
#######################################
hyp <- get_hyp_mat(3,1)
hyp
hyp <- hyp + (hyp != 0)
hyp
ind_hyp1 <- levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])]
ind_hyp1
ind_hyp2
ind_hyp2 <- levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])]
ind_hyp3 <- levels(db_stage1$treat)[c(1,hyp[3,][hyp[3,] != 0])]
ind_hyp4 <- levels(db_stage1$treat)[c(1,hyp[4,][hyp[4,] != 0])]
ind_hyp1
ind_hyp2
ind_hyp3
ind_hyp4
levels(db_stage1$treat)[c(1,2)]
levels(db_stage1$treat)[c(1,3)]
levels(db_stage1$treat)[c(1,3)]
levels(db_stage1$treat)[c(1,4)]
subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[2])==1)
sub1=subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[2])==1)
summary(sub1)
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[3])==1)
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[2])==1)
sub2 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[3])==1)
mod = lm(y_6m ~ treat, sub1)
mod
res = summary(mod)
res
mod = lm(y_6m ~ treat, db_stage1) #are we using this model or should we use individual models?
res = summary(mod)
res
res1
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
res1
coef(res1)[2,3]
#######################################
pval <- c()
for(j in 1:n_arms){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
pval <- c()
for(j in 1:n_arms){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
j=1
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
j=2
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
pval
# The easiest way to get gMCPLite is to install:
install.packages("gMCPLite")
library(gMCPLite)
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(z,0)
preplan <- gPADInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
z1 <- c(z,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
z1 <- c(.1,.2,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(.1,.2,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
preplan <- gPADInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
library(gMCPLite)
install.packages("remotes")
remotes::install_github("Merck/gMCPLite")
# install.packages("remotes")
remotes::install_github("Merck/gMCPLite")
# install.packages("remotes")
remotes::install_github("Merck/gMCPLite")
library(gMCPLite)
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(.1,.2,0)
preplan <- gPADInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
graph_bh
gMCP(g, pvalues=c(0.01, 0.02, 0.04))
gMCP(graph_bh, pvalues=c(0.01, 0.02, 0.04))
g<-gMCP(graph_bh, pvalues=c(0.01, 0.02, 0.04))
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(.1,.2,0)
preplan <- gPADInterim(graph=g,z1=z1,v=v,alpha=alpha)
library(gMCPLite)
graph_bh <- BonferroniHolm(3)
g<-gMCP(graph_bh, pvalues=c(0.01, 0.02, 0.04))
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(.1,.2,0)
preplan <- gPADInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
g<-gMCP(graph_bh, pvalues=c(0.01, 0.02, 0.04))
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(.1,.2,0)
g
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
preplan <- gPADInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
gPADInterim
gMCP
doInterim
remove.packages("gMCPLite")
library(gMCP)
library("gMCP")
library(gMCP)
doInterim()
doInterim
library(gMCP)
graph_bh <- BonferroniHolm(3)
g<-gMCP(graph_bh, pvalues=c(0.01, 0.02, 0.04))
z1 <- c(.1,.2,0)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(.1,.2,0)
preplan <- gPADInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=.05)
preplan
preplan <- doInterim(graph=graph_bh,z1=z1,v=c(0,0,0),alpha=.05)
preplan
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# underlying dependencies
require(mvtnorm)#sim_data function
require(multcomp)#aux functions
require(gtools)#aux functions
##########################################################
##########################################################
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
db <- ewhorm::sim_data(n_arms = 4,
N = 30 * 4,
mu_6m = mu,
mu_12m= mu,
sigma=diag(1,2),
rmonth =12)
summary(db)
##########################################################
##########################################################
set.seed(32)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05) sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05, v=c(0,0,0))
# evaluate trial duration with respect to the rmonth, also assumptions regarding the break between stages
v=c(0,0,0)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05) sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05, v=v)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05) sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05) sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05) sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
db <- ewhorm::sim_data(n_arms = 4,
N = 30 * 4,
mu_6m = mu,
mu_12m= mu,
sigma=diag(1,2),
rmonth =12)
summary(db)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2,
alpha1=0.1, alpha=0.05)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2,
alpha1=0.1, alpha=0.05, v=v)
# Simplified output for simulations
v0=c(0,0,0)
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2,
mu_6m=mu, mu_12m=mu, sigma=sg_m,
rmonth=12, alpha1=0.1, alpha=0.05,
v=v0,
sim_out=T)
