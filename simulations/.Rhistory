db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
db_stage2
sel
levels(db_stage1$treat)[c(1,sel)]
is.vector(levels(db_stage1$treat)[c(1,sel)])
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
db_stage2
library(multcomp);library(ewhorm)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnet = model_dunnet$test$pvalues
#######################################
pval <- c()
for(j in 1:(n_arms-1)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
pval
#######################################
pval <- c()
j)1
j=1
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
sub1
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
coef(res1)
coef(res1)[2,3]
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
j=2
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
sub1
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
coef(res1)
n_arms
summary(db_stage1)
(db_stage1$treat==levels(db_stage1$treat)[3+1])
for(j in 1:(n_arms-2)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
z
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnet = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnet = model_dunnet$test$pvalues
#######################################
pval <- c()
for(j in 1:(n_arms-2)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_6m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
pval_dunnet
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
library(gMCP)
N=N1+N2
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
graph_bh <- BonferroniHolm(3)
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix <- doInterim(graph=graph_bh,z1=z,v=v,alpha=0.025)
z1 <- c(z,0)
A_matrix <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
A_matrix@Aj
A_matrix
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
preplan@Aj
preplan@BJ
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sigma, rmonth=rmonth)
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sigma, rmonth=rmonth)
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,4)]
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
res2 = summary(mod2)
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,4)]
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
db_stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1)],"High")
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2 <- pt(coef(res2)[2,3], mod1$df, lower.tail = FALSE)
Avalues <- c(preplan@BJ[7], #H123
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[1]  #H3
)
pval2 <= Avalues
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
sel=2
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
recruit_time2 = max(db_stage2$recruit_time)
levels(db_stage2$treat)
Avalues <- c(preplan@BJ[7], #H123
preplan@BJ[8], #H12
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
Avalues[1,2,4,5]
Avalues[c(1,2,4,5)]
preplan
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
pval2[1] <= Avalues[c(1,2,4,5)]
pval2[2] <= Avalues[c(1,3,4,6)]
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[3], #H13
preplan@BJ[4], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
Avalues[c(1,3,4,6)]
for(j in 1:3){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
pval2[2] <= Avalues[c(1,3,4,6)]
for(j in 1:2){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
(db_stage2$treat==levels(db_stage2$treat)[2])
levels(db_stage2$treat)[2]
levels(db_stage2$treat)[3]
preplan
preplan@BJ[4]
preplan@BJ[3]
preplan@BJ[5]
preplan
preplan
preplan
preplan
preplan@Aj
preplan@preplanned
preplan@alpha
library(multcomp);library(ewhorm);library(gMCP)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnett = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnett = model_dunnett$test$pvalues
#######################################
# decisions based on pvalues from Dunnett test at 6 month
if(sum(pval_dunnett<alpha1)==2){sc=2}
alpha1=0.1
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sg_m, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnett = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnett = model_dunnett$test$pvalues
#######################################
# decisions based on pvalues from Dunnett test at 6 month
if(sum(pval_dunnett<alpha1)==2){sc=2}
if(sum(pval_dunnett<alpha1)==1){sc=1;sel=3}
if(sum(pval_dunnett<alpha1)==0){sc=0}
#######################################
# pvalues ttest 12 months
pval <- c()
for(j in 1:(n_arms-2)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_12m ~ treat, sub1) #are we using this model or should we use individual models?
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(z,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
preplan
preplan@Aj
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(z,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
preplan
z1 <- c(z,0.2)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=0.025)
preplan
preplan@Aj
matrix()
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,2,3)], mu_12m=mu_12m[c(1,2,3)], sigma=sigma, rmonth=rmonth)
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,2,3)], mu_12m=mu_12m[c(1,2,3)], sigma=sigma, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,2,3)]
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,2,3)], mu_12m=mu_12m[c(1,2,3)], sigma=sg_m, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,2,3)]
recruit_time2 = max(db_stage2$recruit_time)
pval2 <- c()
for(j in 1:2){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[5], #H13
preplan@BJ[3], #H23
preplan@BJ[2], #H2
preplan@BJ[4]  #H1
)
pval2[1] <= Avalues[c(1,2,3,6)] #p1
# pval2[1] <= Avalues[c(1,2,3,6)] #p1
pval2[2] <= Avalues[c(1,2,4,5)] #p2
decision_stage2 = matrix(c(pval2[1] <= Avalues[c(1,2,3,6)],
pval2[2] <= Avalues[c(1,2,4,5)],
byrow = F, ncol = 2)
}
decision_stage2 = matrix(pval2 <= Avalues, ncol = 1)
decision_stage2
decision_stage2 = matrix(c(pval2[1] <= Avalues[c(1,2,4,5)],
pval2[2] <= Avalues[c(1,3,4,6)]),
byrow = F, ncol = 2)
decision_stage2
pval2[1] <= Avalues[c(1,2,4,5)] #p2
# pval2[1] <= Avalues[c(1,2,4,5)] #p2
pval2[2] <= Avalues[c(1,3,4,6)] #p3
decision_stage2 = matrix(c(c(1,2,3),
c(4,5,6)),
byrow = F, ncol = 2)
decision_stage2
library(multcomp);library(ewhorm);library(gMCP)
sigma=sg_m
library(multcomp);library(ewhorm);library(gMCP)
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# server
# setwd("~/GitHub/ewhorm_sim/simulations")
# install.packages('~/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
library(multcomp);library(ewhorm);library(gMCP)
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
N1=30*4; N2=30*2
mu_6m <- mu; mu_12m <- mu
rmonth=10
n_arms=4;alpha1=0.1
sigma=sg_m
#######################################
# stage1
db_stage1 = sim_data(n_arms=n_arms-1, N=N1, mu_6m=mu_6m[1:n_arms-1], mu_12m=mu_12m[1:n_arms-1], sigma=sigma, rmonth=rmonth)
recruit_time1 = max(db_stage1$recruit_time)
model_aov = aov(y_6m ~ treat, db_stage1)
model_dunnett = summary(glht(model = model_aov, linfct=mcp(treat="Dunnett"), alternative = "less"))
pval_dunnett = model_dunnett$test$pvalues
if(sum(pval_dunnett<alpha1)==2){sc=2;sel=2:3}
if(sum(pval_dunnett<alpha1)==1){sc=1;sel=3}
if(sum(pval_dunnett<alpha1)==0){sc=0;sel=0}
pval <- c()
for(j in 1:(n_arms-2)){
sub1 = subset(db_stage1,(db_stage1$treat==levels(db_stage1$treat)[1])+(db_stage1$treat==levels(db_stage1$treat)[j+1])==1)
mod1 = lm(y_12m ~ treat, sub1)
res1 = summary(mod1)
pval[j] <- pt(coef(res1)[2,3], mod1$df, lower.tail = FALSE)
}
z = qnorm(1-pval)
pval
z = qnorm(1-pval)
decision_s1 <- c()
decision_s1[1] = ifelse(pval[1]<alpha1, "Reject", "Accept")
decision_s1[2] = ifelse(pval[2]<alpha1, "Reject", "Accept")
decision_stage1 = data.frame(decision_s1, row.names = levels(db_stage1$treat)[2:3])
decision_stage1
pval
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(z,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
alpha=0.05
N=N1+N2
graph_bh <- BonferroniHolm(3)
# the package assumes that wj are equal for all j
v <- c(1/2,1/2,0)
z1 <- c(z,0)
preplan <- doInterim(graph=graph_bh,z1=z1,v=v,alpha=alpha)
# preplan@Aj
# preplan@BJ
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,2,3)], mu_12m=mu_12m[c(1,2,3)], sigma=sigma, rmonth=rmonth)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,2,3)]
recruit_time2 = max(db_stage2$recruit_time)
pval2 <- c()
for(j in 1:2){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[5], #H13
preplan@BJ[3], #H23
preplan@BJ[2], #H2
preplan@BJ[4]  #H1
)
decision <- c()
decision[1] = ifelse(sum(pval2[1] <= Avalues[c(1,2,3,6)])==4, "Reject", "Accept")
decision[2] = ifelse(sum(pval2[2] <= Avalues[c(1,2,4,5)])==4, "Reject", "Accept")
#
decision_stage2 = data.frame(decision, row.names = levels(db_stage2$treat)[2:3])
pval2 = data.frame(pval2, row.names = levels(db_stage2$treat)[2:3])
pval2
decision_stage2
db_stage2 = sim_data(n_arms=3, N=N2, mu_6m=mu_6m[c(1,sel,4)], mu_12m=mu_12m[c(1,sel,4)], sigma=sigma, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1,sel)],"High")
recruit_time2 = max(db_stage2$recruit_time)
pval2 <- c()
for(j in 1:2){
sub2 = subset(db_stage2,(db_stage2$treat==levels(db_stage2$treat)[1])+(db_stage2$treat==levels(db_stage2$treat)[j+1])==1)
mod2 = lm(y_12m ~ treat, sub2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2[j] <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
}
Avalues <- c(preplan@BJ[7]/2, #H123
preplan@BJ[6], #H12
preplan@BJ[5], #H13
preplan@BJ[3], #H23
preplan@BJ[2], #H2
preplan@BJ[1]  #H3
)
decision <- c()
dec1 <- sum(pval2[1] <= Avalues[c(1,2,4,5)])
dec2 <- sum(pval2[2] <= Avalues[c(1,3,4,6)])
decision[1] = ifelse(dec1==4, "Reject", "Accept")
decision[2] = ifelse(dec2==4, "Reject", "Accept")
#
decision_stage2 = data.frame(decision, row.names = levels(db_stage2$treat)[2:3])
pval2 = data.frame(pval2, row.names = levels(db_stage2$treat)[2:3])
decision_stage2
pval2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu_6m[c(1,4)], mu_12m=mu_12m[c(1,4)], sigma=sigma, rmonth=rmonth)
levels(db_stage2$treat) = c(levels(db_stage1$treat)[c(1)],"High")
recruit_time2 = max(db_stage2$recruit_time)
mod2 = lm(y_12m ~ treat, db_stage2) #are we using this model or should we use individual models?
res2 = summary(mod2)
pval2 <- pt(coef(res2)[2,3], mod2$df, lower.tail = FALSE)
Avalues <- c(preplan@BJ[7], #H123
preplan@BJ[5], #H13
preplan@BJ[3], #H23
preplan@BJ[1]  #H3
)
decision_stage2 = matrix(pval2 <= Avalues, ncol = 1) #p3
decision <- c()
decision[1] = ifelse(sum(pval2 <= Avalues)==4, "Reject", "Accept")
#
decision_stage2 = data.frame(decision, row.names = levels(db_stage2$treat)[2])
pval2 = data.frame(pval2, row.names = levels(db_stage2$treat)[2])
decision_stage2
pval2
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# underlying dependencies
require(mvtnorm)#sim_data function
require(multcomp)#aux functions
require(gtools)#aux functions
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
db <- ewhorm::sim_data(n_arms = 4,
N = 30 * 4,
mu_6m = mu,
mu_12m= mu,
sigma=diag(1,2),
rmonth =12)
summary(db)
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# Copy in R folder the functions of the r package
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg")
devtools::document()
devtools::load_all()
# Build & check the package
devtools::build(pkg = "C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg", path = NULL, binary = FALSE, manual = TRUE, vignettes = TRUE)
devtools::check_built(path = "C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg", cran = TRUE, manual = TRUE, incoming = TRUE)
devtools::build_manual(pkg = "C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/rpkg", path = NULL)
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# server
# setwd("~/GitHub/ewhorm_sim/simulations")
# install.packages('~/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
rm(list = ls())
# Remove Package
remove.packages("ewhorm")
# server
# setwd("~/GitHub/ewhorm_sim/simulations")
# install.packages('~/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
# local
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/simulations")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_hyp_mat.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/get_max_col_index.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_trial.R")
# source("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/R/sim_data.R")
install.packages('C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/ewhorm_0.1.tar.gz',repos=NULL)
library(ewhorm)
# packges needed for this script
library(future)
library(purrr)
library(furrr)
# underlying dependencies
require(mvtnorm)#sim_data function
require(multcomp)#aux functions
require(gtools)#aux functions
mu = c(0,0,0,0)
sg_m=matrix(c(1,.9,.9,1),nrow=2,byrow = T)
db <- ewhorm::sim_data(n_arms = 4,
N = 30 * 4,
mu_6m = mu,
mu_12m= mu,
sigma=diag(1,2),
rmonth =12)
summary(db)
##########################################################
##########################################################
set.seed(32)
# evaluate trial duration with respect to the rmonth, also assumptions regarding the break between stages
sim_trial_pce(n_arms=4, N1=30*4, N2=30*2, mu_6m=mu, mu_12m=mu, sigma=sg_m, rmonth=2, alpha1=0.1, alpha=0.05)
sim_trial_pce
