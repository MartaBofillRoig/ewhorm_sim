#########
# Settings
set.seed(123)
mu=c(0,1,2,5)
N1 = 30*4
# install.packages("DescTools")
library(DescTools)
# Prelude - Auxiliary functions
# Function to get the column index of the maximum value in a row
get_max_col_index <- function(row) {
return(which.max(row))
}
# Function to compute the hypotheses to test (closed test)
get_hyp_mat <- function(n_hypothesis = 3, selected_hypothesis = 1){
elements <- c(rep(0, n_hypothesis), 1:n_hypothesis)
hyp_mat <- unique(combinations(n=length(elements), r=n_hypothesis, v=elements, set = F, repeats.allowed = F))
selected_rows <- hyp_mat[which(apply(hyp_mat == selected_hypothesis, 1, any)), ]
selected_rows
}
# get_hyp_mat(3,2)
# Function to simulate trial data (1-stage, multiple arms)
sim_data <- function(n_arms, N, mu_6m, mu_12m, sd_y=0.1){
treatments <- factor(sample(1:n_arms, N, replace = TRUE),
levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
X <- model.matrix(~ treatments - 1)
# simulate trial data
y_6m = X %*% mu_6m + rnorm(N, mean = 0, sd = sd_y)
y_12m = X %*% mu_12m + rnorm(N, mean = 0, sd = sd_y)
# Treatment indicator for dataframe
max_col_indices <- apply(X, 1, get_max_col_index)
treat=unname(max_col_indices)
treat=factor(treat, levels = 1:n_arms,
labels = c("Placebo", "Low", "Medium", "High")[1:n_arms])
# Output
data=data.frame(y_6m=y_6m, y_12m=y_12m, treat=treat)
return(data)
}
# Example
db = sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sd_y=0.1)
model_6m = lm(y_6m~treat,data=db)
model_12 = lm(y_12m~treat,data=db)
summary(model_6m)
summary(model_12)
summary(model_12)
summary(model_12)
(1,1,1)%*%(2,2,2)
c(1,1,1)%*%c(2,2,2)
c(1,1,1)%*%t(c(2,2,2))
c(1,1,1)%*%t(c(2,2,2))%*%c(1,1,1)
c(1,1,1)%*%t(c(2,2,2))%*%c(1,1,1) / (c(1,1,1)%*%t(c(2,2,2))%*%c(1,1,1))
vcov_matrix_6m <- vcov(model_6m)
vcov_matrix_12m <- vcov(model_12)
vcov_matrix_6m
var_cov_matrix_t_tests <- rbind(vcov_matrix_6m, vcov_matrix_12m)
var_cov_matrix_t_tests
# Perform multiple comparisons using glht
multiple_comparisons <- glht(c(model_6m,model_12), linfct = mcp(predictor = "Tukey"))
# Load the multcomp package
library(multcomp)
# Perform multiple comparisons using glht
multiple_comparisons <- glht(c(model_6m,model_12), linfct = mcp(predictor = "Tukey"))
# Perform multiple comparisons using glht
multiple_comparisons <- glht(model=c(model_6m,model_12), linfct = mcp(predictor = "Tukey"))
# Perform multiple comparisons using glht
multiple_comparisons <- glht(model=mmm(model_6m,model_12), linfct = mcp(predictor = "Tukey"))
# Perform multiple comparisons using glht
multiple_comparisons <- glht(mmm(model_6m,model_12), linfct = mcp(predictor = "Tukey"))
glht(mmm(model_6m,model_12m),
mlf(mcp(Group = "Dunnett")), alternative = "greater")
# Example
db = sim_data(n_arms=4, N=30*4, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sd_y=0.1)
model_6m = lm(y_6m~treat,data=db)
model_12 = lm(y_12m~treat,data=db)
summary(model_6m)
summary(model_12)
glht(mmm(model_6m,model_12m),
mlf(mcp(Group = "Dunnett")), alternative = "greater")
model_12m = lm(y_12m~treat,data=db)
glht(mmm(model_6m,model_12m),
mlf(mcp(Group = "Dunnett")), alternative = "greater")
glht(mmm(model_6m,model_12m),
mlf(mcp(treat = "Dunnett")), alternative = "greater")
g<-glht(mmm(model_6m,model_12m),
mlf(mcp(treat = "Dunnett")), alternative = "greater")
var_cov_matrix <- vcov(g)
var_cov_matrix
vcov(g)
g<-glht(mmm(model_6m,model_12m),
mlf(mcp(treat = "Dunnett")), alternative = "greater")
g
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07_simulations")
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07_simulations")
source(aux.R)
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07_simulations")
source("aux.R")
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07_simulations")
source("aux.R")
alpha1=0.5
# Example
n_arms=4; N1=30*4; N2=30*2; mu=c(0,1,2,5); sd_y=0.1
# stage1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sd_y=sd_y)
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
res_stage1
#--- Best case
if(sum(res_stage1$Placebo[,4]<alpha1)==3){
sel=2
}
sel
subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,2,4)])
get_hyp_mat(3,2)
library(gtools)
get_hyp_mat(3,2)
get_hyp_mat(3,sel)
MASS::contr.treatment(4, base = 1)
install.packages("MASS")
install.packages("MASS")
MASS::contr.treatment(4, base = 1)
contr.treatment(4, base = 1)
# Load the necessary libraries
library(stats)
# Assuming your treatment levels are "A", "B", "C", and "D"
treatment_levels <- c("A", "B", "C", "D")
# Create a custom contrast matrix to compare each level with level "A"
contr_matrix <- matrix(0, nrow = length(treatment_levels), ncol = length(treatment_levels) - 1)
rownames(contr_matrix) <- treatment_levels[-1]
for (i in 1:(length(treatment_levels) - 1)) {
contr_matrix[i, i] <- 1
contr_matrix[i, length(treatment_levels)] <- -1
}
# Specify the custom contrasts for the treatment variable
contrasts(my_data$treatment) <- contr_matrix
contrasts(my_data$treatment)
my_data <- db_stage1
# Specify the custom contrasts for the treatment variable
contrasts(my_data$treatment) <- contr_matrix
my_data <- db_stage1
# Specify the custom contrasts for the treatment variable
contrasts(my_data$treatment) <- contr_matrix
# Specify the custom contrasts for the treatment variable
contrasts(my_data$treat) <- contr_matrix
contrasts(my_data$treat)
# Assuming your treatment levels are "A", "B", "C", and "D"
treatment_levels <- c("Placebo", "Low", "Medium", "High")
# Create a custom contrast matrix to compare each level with level "A"
contr_matrix <- matrix(0, nrow = length(treatment_levels), ncol = length(treatment_levels) - 1)
rownames(contr_matrix) <- treatment_levels[-1]
for (i in 1:(length(treatment_levels) - 1)) {
contr_matrix[i, i] <- 1
contr_matrix[i, length(treatment_levels)] <- -1
}
my_data <- db_stage1
# Assuming your treatment levels are "A", "B", "C", and "D"
treatment_levels <- c("Placebo", "Low", "Medium", "High")
# Create a custom contrast matrix to compare each level with level "A"
contr_matrix <- matrix(0, nrow = length(treatment_levels), ncol = length(treatment_levels) - 1)
rownames(contr_matrix) <- treatment_levels[-1]
# Create a custom contrast matrix to compare each level with level "A"
contr_matrix <- matrix(0, nrow = length(treatment_levels), ncol = length(treatment_levels) - 1)
# Assuming your treatment levels are "A", "B", "C", and "D"
treatment_levels <- c("Placebo", "Low", "Medium", "High")
# Create a custom contrast matrix to compare each level with level "A"
contr_matrix <- matrix(0, nrow = length(treatment_levels), ncol = length(treatment_levels) - 1)
rownames(contr_matrix) <- treatment_levels[-1]
rownames(contr_matrix)
contr_matrix
treatment_levels[-1]
# Create a custom contrast matrix to compare each level with level "A"
contr_matrix <- matrix(0, nrow = length(treatment_levels), ncol = length(treatment_levels) - 1)
contr_matrix
rownames(contr_matrix) <- treatment_levels[-1]
for (i in 1:(length(treatment_levels) - 1)) {
contr_matrix[i, i] <- 1
contr_matrix[i, length(treatment_levels)] <- -1
}
my_data <- db_stage1
# Specify the custom contrasts for the treatment variable
contrasts(my_data$treat) <- contr_matrix
# Fit the linear regression model with the custom contrasts
model <- lm(response ~ treatment, data = my_data)
# View the model summary
summary(model)
get_hyp_mat(3,sel)
setwd("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/ewhorm_sim/2023-07_simulations")
source("aux.R")
# Settings
set.seed(123)
mu=c(0,1,2,5)
N1 = 30*4
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sd_y=sd_y)
n_arms=4; N1=30*4; N2=30*2; mu=c(0,1,2,5); sd_y=0.1
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sd_y=sd_y)
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
# selection
#--- Worst case: No trend is seen in any of the doses (e.g., all p> alpha1): select highest dose
if(sum(res_stage1$Placebo[,4]>alpha1)==3){
sel=4
}
alpha1=0.5
db_stage1 = sim_data(n_arms=n_arms, N=N1, mu_6m=mu, mu_12m=mu+c(0,1,1,2), sd_y=sd_y)
res_stage1 = DunnettTest(x=db_stage1$y_6m, g=db_stage1$treat)
# selection
#--- Worst case: No trend is seen in any of the doses (e.g., all p> alpha1): select highest dose
if(sum(res_stage1$Placebo[,4]>alpha1)==3){
sel=4
}
#--- Intermediate case: some doses show a trend: select the (highest) dose, no new recruitment for the other doses
if(sum(res_stage1$Placebo[,4]<alpha1)<3){
sel=which.min(res_stage1$Placebo[,4])+1
}
#--- Intermediate case 2: some doses show a trend: select the lowest effective dose, no new recruitment for the other doses
if(sum(res_stage1$Placebo[,4]<alpha1)<3){
sel=which.min(res_stage1$Placebo[,4])+1
}
#--- Best case
if(sum(res_stage1$Placebo[,4]<alpha1)==3){
sel=2
}
get_hyp_mat(3,sel)
hyp<-get_hyp_mat(3,sel)
hyp<-get_hyp_mat(3,sel)
hyp[1,][hyp != 0]
hyp[1,]
hyp[1,][hyp[1,] != 0]
hyp[2,][hyp[2,] != 0]
subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,2,4)])
hyp[2,][hyp[2,] != 0]
subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[hyp[2,][hyp[2,] != 0]])
subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[hyp[3,][hyp[3,] != 0]])
subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[hyp[4,][hyp[4,] != 0]])
hyp
DunnettTest(x=db_hyp$y_6m, g=db_hyp$treat)
levels(db_stage1$treat)[hyp[2,][hyp[2,] != 0]]
levels(db_stage1$treat)[hyp[3,][hyp[3,] != 0]]
hyp[3,][hyp[3,] != 0]
levels(db_stage1$treat)[hyp[2,][hyp[2,] != 0]]
hyp[2,][hyp[2,] != 0]
hyp <-get_hyp_mat(3,sel)
hyp+1
hyp <- get_hyp_mat(3,sel)
hyp <- hyp + (hyp != 0)
hyp <- get_hyp_mat(3,sel)
hyp
hyp <- hyp + (hyp != 0)
hyp
hyp[2,][hyp[2,] != 0]
c(1,hyp[2,][hyp[2,] != 0])
# unique(hyp[2,][hyp[2,] != 0])
levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])]
# unique(hyp[2,][hyp[2,] != 0])
# levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])]
subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
levels(db_stage1$treat)[hyp[3,][hyp[3,] != 0]]
hyp
# unique(hyp[2,][hyp[2,] != 0])
# levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])]
subset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
subset_hyp3 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[3,][hyp[3,] != 0])])
subset_hyp4 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[4,][hyp[4,] != 0])])
# unique(hyp[2,][hyp[2,] != 0])
# levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])]
subset_hyp1 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])])
subset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
subset_hyp3 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[3,][hyp[3,] != 0])])
subset_hyp4 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[4,][hyp[4,] != 0])])
# unique(hyp[2,][hyp[2,] != 0])
# levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])]
sset_hyp1 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[1,][hyp[1,] != 0])])
sset_hyp1
model_12m = lm(y_12m~treat,data=sset_hyp1)
model_12m
summary(model_12m)
DunnettTest(x=sset_hyp2$y_12m, g=sset_hyp2$treat)
sset_hyp2 <- subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,hyp[2,][hyp[2,] != 0])])
DunnettTest(x=sset_hyp2$y_12m, g=sset_hyp2$treat)
aov(x=sset_hyp2$y_12m, g=sset_hyp2$treat)
result_anova <- aov(y_12m ~ treat, data = sset_hyp2)
result_anova
View(sset_hyp2)
summary(result_anova)
result_anova2 <- summary(aov(y_12m ~ treat, data = sset_hyp2))
result_anova3 <- summary(aov(y_12m ~ treat, data = sset_hyp3))
result_anova4 <- summary(aov(y_12m ~ treat, data = sset_hyp4))
sset_hyp1
model_12m = lm(y_12m~treat,data=sset_hyp1)
summary(model_12m)
# db_hyp = subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,2,4)])
result_anova1 <- summary(aov(y_12m ~ treat, data = sset_hyp1))
result_anova1
aov(y_12m ~ treat, data = sset_hyp1)
summary(lm(y_12m ~ treat, data = sset_hyp2))
summary(aov(y_12m ~ treat, data = sset_hyp2))
summary(model_12m)
mm=summary(model_12m)
result_anova1
result_anova1[1,]
mm$fstatistic
mm$coefficients
mm$terms
mm$cov.unscaled
mm$r.squared
# db_hyp = subset(db_stage1,db_stage1$treat==levels(db_stage1$treat)[c(1,2,4)])
result_anova1 <- summary(aov(y_12m ~ treat, data = sset_hyp1))
is.matrix(result_anova1)
is.list(result_anova1)
result_anova1
result_anova1[[1]]
result_anova1[[1]][[1]]
result_anova1[[1]][[4]]
result_anova1[[1]][[5]]
result_anova1[[1]][[5]][[1]]
result_anova1[[1]][[6]]
result_anova1[[1]][[7]]
result_anova1[[1]][[2]]
result_anova1[[1]][[3]]
result_anova1[[1]][[4]]
result_anova1[[1]][[5]]
8.607265e-40
result_anova1[[1]][[5]]
result_anova1[[1]][[5]][[1]]
result_anova1[[1]][[5]][[1]]
model_12m = lm(y_12m~treat,data=sset_hyp1)
mm=summary(model_12m)
mm
mm$coefficients
res
# stage2
db_stage2 = sim_data(n_arms=2, N=N2, mu_6m=mu[c(1,sel)], mu_12m=mu[c(1,sel)]+c(0,1,1,2)[c(1,sel)], sd_y=sd_y)
levels(db_stage2$treat) = levels(db_stage1$treat)[c(1,sel)]
db_stage2
pvalue_stage2 <- summary(aov(y_12m ~ treat, data = db_stage2))
pvalue_stage2
